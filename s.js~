no  #!/usr/bin/env node
"use strict";

//npm install file-encryptor

var crypto = require("crypto"),
    argv = require("optimist").argv,
    fs = require('fs');	


function Stack()
{
  this.stac=new Array();
  this.pop=function(){
  	return this.stac.pop();
  }
  this.push=function(item){
  	this.stac.push(item);
 }
  this.count=function(){
    return this.stac.length;
  } 

}

function p(v){
  console.log(v);
}

function DirectoryGetFilesRecursive(b)
{
    // 1.
    // Store results in the file results list.
    var result = new Array();
    // 2.
    // Store a stack of our directories.
    var stack=new Stack();
    // 3.
    // Add initial directory.
    stack.push(b);
    // 4.
    // Continue while there are directories to process
    while (stack.count() > 0)
    {
        // A.
        // Get top directory
        var dir = stack.pop();
        try
        {
          // B
          // Add all files at this directory to the result List.
          var files = fs.readdirSync(dir);
          for(var i in files){
              if (!files.hasOwnProperty(i)) continue;
              var name = dir+'/'+files[i];
              if (fs.lstatSync(name).isSymbolicLink())  continue
              // C
              // Add all directories at this directory.
              if (fs.statSync(name).isDirectory()){
                  stack.push(name);
              } else {
                  result.push(name);
              }
          }
      }
      catch(err)
      {
            p(err)
      }
    }
    return result;
}


var files = DirectoryGetFilesRecursive("/home/j/lab/storager");
p("todos arquivos");
console.log(files);


var hash = crypto.createHash("md5");
hash.update("Man oh man do I love node!");
var r=hash.digest("hex");
console.log(r);


var encryptor = require('file-encryptor');

var key = 'My Super Secret Key';

for(var i in files){
    
    encryptor.encryptFile(files[i], files[i]+'.jenc', key, function(err) {
      // Encryption complete.
    });


}


encryptor.decryptFile('s.js.jenc', 'output_file.txt', key, function(err) {
  // Decryption complete.
});

